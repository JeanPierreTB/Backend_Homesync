services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_LOG_RETENTION_HOURS: 168
    depends_on:
      - zookeeper

  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: homesync_db
    volumes:
      - postgres-data:/var/lib/postgresql/data

  adminer:
    image: adminer
    container_name: adminer
    depends_on:
      - postgres
    ports:
      - "8080:8080"

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./user-service:/app
    command: ["npm", "start"]

  payment-service:
    build:
      context: ./payment-service
    container_name: payment-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./payment-service:/app
    command: ["npm", "start"]


  request-service:
    build:
      context: ./request-service
    container_name: request-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./request-service:/app
    command: ["npm", "start"]

  reservation-service:
    build:
      context: ./reservation-service
    container_name: reservation-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./reservation-service:/app
    command: ["npm", "start"]   

  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./notification-service:/app
    command: ["npm", "start"]

  capital-service:
    build:
      context: ./capital-service
    container_name: capital-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./capital-service:/app
    command: ["npm", "start"]
  
  inquilin-service:
    build:
      context: ./inquilin-service
    container_name: inquilin-service
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/homesync_db
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./inquilin-service:/app
    command: ["npm", "start"]

  apigateway:
    image: nginx:alpine
    container_name: apigateway
    ports:
      - "80:80" 
    volumes:
      - ./Apigateway/nginx.conf:/etc/nginx/nginx.conf 
    depends_on:
      - user-service
      - payment-service
      - request-service
      - reservation-service
      - notification-service
      - capital-service
      - inquilin-service
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: